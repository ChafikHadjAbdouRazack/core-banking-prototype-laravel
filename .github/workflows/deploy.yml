name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - demo
          - production
        default: demo
      skip-tests:
        description: 'Skip tests (use with caution)'
        required: false
        type: boolean
        default: false

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'

permissions:
  contents: read
  deployments: write
  id-token: write

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      deploy-version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine Version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="main-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, opcache, gmp
          tools: composer:v2
          coverage: none
          
      - name: Validate Composer Files
        run: composer validate --strict
        
      - name: Check for Security Vulnerabilities
        run: |
          composer audit --no-dev || AUDIT_FAILED=1
          if [ "$AUDIT_FAILED" == "1" ]; then
            echo "::warning::Security vulnerabilities found in dependencies"
          fi
          
      - name: Run Critical Tests
        if: ${{ !inputs.skip-tests }}
        run: |
          composer install --prefer-dist --no-progress --optimize-autoloader
          ./vendor/bin/pest tests/Unit --stop-on-failure

  build-artifacts:
    name: Build Release Artifacts
    needs: [pre-deployment-checks]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, opcache, gmp
          tools: composer:v2
          coverage: none
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install PHP Dependencies (Production)
        run: |
          composer install --prefer-dist --no-progress --no-dev --optimize-autoloader
          composer dump-autoload --optimize --no-dev
          
      - name: Install Node Dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Build Frontend Assets
        run: |
          npm run build
          rm -rf node_modules
          
      - name: Optimize Laravel
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan event:cache
          
      - name: Create Deployment Package
        run: |
          tar -czf deploy-${{ needs.pre-deployment-checks.outputs.deploy-version }}.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='tests' \
            --exclude='*.test.js' \
            --exclude='*.spec.js' \
            --exclude='.env*' \
            --exclude='storage/app/*' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            .
            
      - name: Upload Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ needs.pre-deployment-checks.outputs.deploy-version }}
          path: deploy-*.tar.gz
          retention-days: 7

  deploy-demo:
    name: Deploy to Demo
    needs: [pre-deployment-checks, build-artifacts]
    if: |
      github.event.inputs.environment == 'demo' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment: demo
    timeout-minutes: 30
    
    steps:
      - name: Check Demo Server Configuration
        run: |
          if [ -z "${{ secrets.DEMO_SERVER }}" ]; then
            echo "::warning::Demo server not configured. Skipping deployment."
            exit 0
          fi
          echo "Demo server configured. Proceeding with deployment."
          
      - name: Download Deployment Package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ needs.pre-deployment-checks.outputs.deploy-version }}
          
      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEMO_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.DEMO_SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          
      - name: Deploy to Demo Environment
        env:
          DEPLOY_SERVER: ${{ secrets.DEMO_SERVER }}
          DEPLOY_USER: ${{ secrets.DEMO_USER }}
          DEPLOY_PATH: ${{ secrets.DEMO_PATH }}
        run: |
          echo "::notice::Deploying version ${{ needs.pre-deployment-checks.outputs.deploy-version }} to demo"
          
          # Transfer deployment package
          scp deploy-*.tar.gz ${DEPLOY_USER}@${DEPLOY_SERVER}:${DEPLOY_PATH}/
          
          # Execute deployment commands
          ssh ${DEPLOY_USER}@${DEPLOY_SERVER} << 'ENDSSH'
            cd ${DEPLOY_PATH}
            
            # Enable maintenance mode
            php artisan down --render="maintenance" --retry=60
            
            # Backup current deployment
            if [ -d current ]; then
              rm -rf previous
              mv current previous
            fi
            
            # Extract new deployment
            mkdir current
            tar -xzf deploy-*.tar.gz -C current
            rm deploy-*.tar.gz
            
            # Copy environment file and storage symlinks
            cp .env current/.env
            ln -nfs ../../storage/app/public current/public/storage
            
            # Set permissions
            chmod -R 755 current/storage current/bootstrap/cache
            
            # Run deployment tasks
            cd current
            php artisan migrate --force
            php artisan db:seed --class=ProductionSeeder --force || true
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan event:cache
            php artisan queue:restart
            
            # Disable maintenance mode
            php artisan up
          ENDSSH
          
      - name: Run Post-deployment Tests
        env:
          DEMO_URL: ${{ vars.DEMO_URL }}
        run: |
          echo "Running smoke tests on demo..."
          
          # Health check
          curl -f ${DEMO_URL}/health || exit 1
          
          # API health check
          curl -f ${DEMO_URL}/api/health || exit 1
          
          # Basic functionality test
          curl -f ${DEMO_URL}/api/v1/status || exit 1
          
      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Successfully deployed to demo"
          else
            echo "❌ Demo deployment failed"
          fi

  deploy-production:
    name: Deploy to Production
    needs: [pre-deployment-checks, build-artifacts]
    # Note: We don't depend on deploy-demo since it might be skipped
    if: |
      (github.event.inputs.environment == 'production' && github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 45
    
    steps:
      - name: Check Production Server Configuration
        run: |
          if [ -z "${{ secrets.PRODUCTION_SERVER }}" ]; then
            echo "::warning::Production server not configured. Skipping deployment."
            exit 0
          fi
          echo "Production server configured. Proceeding with deployment."
          
      - name: Download Deployment Package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ needs.pre-deployment-checks.outputs.deploy-version }}
          
      - name: Create Deployment Record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              task: 'deploy',
              auto_merge: false,
              required_contexts: [],
              environment: 'production',
              description: 'Production deployment v${{ needs.pre-deployment-checks.outputs.deploy-version }}'
            });
            
            core.setOutput('deployment_id', deployment.data.id);
            
      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.PRODUCTION_SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          
      - name: Deploy to Production
        id: deploy
        env:
          DEPLOY_SERVER: ${{ vars.PRODUCTION_SERVER }}
          DEPLOY_USER: ${{ vars.PRODUCTION_USER }}
          DEPLOY_PATH: ${{ vars.PRODUCTION_PATH }}
        run: |
          echo "::notice::Deploying version ${{ needs.pre-deployment-checks.outputs.deploy-version }} to production"
          
          # Transfer deployment package
          scp deploy-*.tar.gz ${DEPLOY_USER}@${DEPLOY_SERVER}:${DEPLOY_PATH}/
          
          # Execute deployment commands
          ssh ${DEPLOY_USER}@${DEPLOY_SERVER} << 'ENDSSH'
            cd ${DEPLOY_PATH}
            
            # Enable maintenance mode
            php artisan down --render="maintenance" --retry=60
            
            # Backup database
            php artisan backup:run --only-db
            
            # Backup current deployment
            if [ -d current ]; then
              rm -rf previous
              mv current previous
            fi
            
            # Extract new deployment
            mkdir current
            tar -xzf deploy-*.tar.gz -C current
            rm deploy-*.tar.gz
            
            # Copy environment file and storage symlinks
            cp .env current/.env
            ln -nfs ../../storage/app/public current/public/storage
            
            # Set permissions
            chmod -R 755 current/storage current/bootstrap/cache
            
            # Run deployment tasks
            cd current
            
            # Run migrations with safety check
            php artisan migrate:status
            php artisan migrate --force
            
            # Clear and rebuild caches
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan event:cache
            
            # Optimize application
            php artisan optimize
            
            # Restart queue workers gracefully
            php artisan queue:restart
            
            # Warm up caches
            php artisan schedule:run
            
            # Disable maintenance mode
            php artisan up
          ENDSSH
          
          echo "deploy_status=success" >> $GITHUB_OUTPUT
          
      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deploy.outputs.deployment_id }},
              state: '${{ steps.deploy.outputs.deploy_status || 'failure' }}',
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Production deployment ${{ steps.deploy.outputs.deploy_status || 'failed' }}',
              environment: 'production'
            });
            
      - name: Run Production Smoke Tests
        if: success()
        env:
          PRODUCTION_URL: ${{ vars.PRODUCTION_URL }}
        run: |
          echo "Running production smoke tests..."
          
          # Health check
          curl -f ${PRODUCTION_URL}/health || exit 1
          
          # API health check
          curl -f ${PRODUCTION_URL}/api/health || exit 1
          
          # Database connectivity
          curl -f ${PRODUCTION_URL}/api/v1/status || exit 1
          
          # Queue worker status
          curl -f ${PRODUCTION_URL}/api/v1/queue/status || exit 1
          
      - name: Rollback on Failure
        if: failure()
        env:
          DEPLOY_SERVER: ${{ secrets.PRODUCTION_SERVER }}
          DEPLOY_USER: ${{ secrets.PRODUCTION_USER }}
          DEPLOY_PATH: ${{ secrets.PRODUCTION_PATH }}
        run: |
          echo "::error::Production deployment failed! Initiating rollback..."
          
          ssh ${DEPLOY_USER}@${DEPLOY_SERVER} << 'ENDSSH'
            cd ${DEPLOY_PATH}
            
            # Enable maintenance mode
            php artisan down --render="maintenance"
            
            # Rollback to previous version
            if [ -d previous ]; then
              rm -rf current
              mv previous current
              
              cd current
              php artisan up
              
              echo "Rollback completed successfully"
            else
              echo "No previous version available for rollback!"
              exit 1
            fi
          ENDSSH

  post-deployment:
    name: Post-deployment Tasks
    needs: [pre-deployment-checks, deploy-production]
    if: |
      success() &&
      needs.deploy-production.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Clear CDN Cache
        run: |
          echo "Clearing CDN cache..."
          # Clear Cloudflare/CDN cache
          
      - name: Update Monitoring
        run: |
          echo "Updating monitoring dashboards..."
          # Update DataDog/New Relic with deployment marker
          
      - name: Notify Team
        run: |
          echo "Deployment completed successfully!"
          echo "Version: ${{ needs.pre-deployment-checks.outputs.deploy-version }}"
          # Send Slack/Discord notification
          
      - name: Create Release Notes
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Release ${tag}`,
              body: `## What's Changed\n\nFull changelog: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/compare/...${tag}`,
              draft: false,
              prerelease: false
            });

  deployment-summary:
    name: Deployment Summary
    needs: [deploy-demo, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Deployment Status
        run: |
          echo "## Deployment Summary"
          echo ""
          
          # Check demo deployment
          if [[ "${{ needs.deploy-demo.result }}" == "success" ]]; then
            echo "✅ Demo deployment: Success"
          elif [[ "${{ needs.deploy-demo.result }}" == "skipped" ]]; then
            echo "⏭️ Demo deployment: Skipped (server not configured)"
          else
            echo "❌ Demo deployment: Failed"
          fi
          
          # Check production deployment
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment: Success"
          elif [[ "${{ needs.deploy-production.result }}" == "skipped" ]]; then
            echo "⏭️ Production deployment: Skipped (server not configured or not triggered)"
          else
            echo "❌ Production deployment: Failed"
          fi