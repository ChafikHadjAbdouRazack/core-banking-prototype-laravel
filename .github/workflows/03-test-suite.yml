name: Test Suite Pipeline

on:
  workflow_call:
    inputs:
      php-version:
        description: 'PHP version to use'
        required: false
        default: '8.4'
        type: string
      node-version:
        description: 'Node.js version to use'
        required: false
        default: '20'
        type: string
    secrets:
      CODECOV_TOKEN:
        required: false

env:
  PHP_VERSION: ${{ inputs.php-version }}
  NODE_VERSION: ${{ inputs.node-version }}
  COMPOSER_PROCESS_TIMEOUT: 0
  COMPOSER_NO_INTERACTION: 1
  COMPOSER_NO_AUDIT: 1

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, opcache, pcntl, gd, imagick, bcmath, intl, zip, soap
          tools: composer:v2
          coverage: xdebug
          ini-values: |
            memory_limit=512M
            max_execution_time=360
            
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.composer-cache.outputs.dir }}
            node_modules
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('**/composer.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
            
      - name: Install PHP Dependencies
        run: |
          composer install --prefer-dist --no-progress --optimize-autoloader
          composer dump-autoload
          
      - name: Install Node Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm run build
          
      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan migrate --force
          
      - name: Run Unit Tests
        run: |
          # Run unit tests using CI configuration with MySQL
          ./vendor/bin/pest --testsuite=Unit --configuration=phpunit.ci.xml --coverage --min=70
          
      - name: Run Security Tests
        if: always()
        run: |
          # Run security tests separately with CI configuration
          ./vendor/bin/pest --testsuite=Security --configuration=phpunit.ci.xml
          
      - name: Upload Test Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  feature-tests:
    name: Feature Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, opcache, pcntl, gd, imagick, bcmath, intl, zip, soap
          tools: composer:v2
          coverage: xdebug
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          composer install --prefer-dist --no-progress --optimize-autoloader
          npm ci --prefer-offline --no-audit
          npm run build
          
      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan migrate --force
          
      - name: Run Feature Tests
        run: ./vendor/bin/pest --testsuite=Feature --configuration=phpunit.ci.xml --coverage --min=65

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, opcache, pcntl, gd, imagick, bcmath, intl, zip, soap
          tools: composer:v2
          coverage: xdebug
          
      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --optimize-autoloader
          
      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan migrate --force
          
      - name: Run Integration Tests
        run: ./vendor/bin/pest --testsuite=Integration --configuration=phpunit.ci.xml --coverage --min=55
        
  behat-tests:
    name: Behat Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, opcache, pcntl, gd, imagick, bcmath, intl, zip, soap, curl
          tools: composer:v2
          coverage: none
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          composer install --prefer-dist --no-progress --optimize-autoloader
          npm ci --prefer-offline --no-audit
          npm run build
          
      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          
          # Add MySQL connection details
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=root" >> .env
          
          php artisan key:generate
          
          # Clear and rebuild all caches to ensure configs are loaded
          php artisan config:clear
          php artisan cache:clear
          php artisan config:cache
          php artisan route:cache
          
          # Wait for MySQL to be fully ready
          timeout 30 bash -c 'until echo "SELECT 1" | mysql -h127.0.0.1 -P3306 -uroot -proot testing; do echo "Waiting for MySQL..."; sleep 2; done'
          
          # Run all migrations (permission tables migration already exists in project)
          php artisan migrate --force
          
          # List tables to verify migrations ran (debug info)
          echo "=== Database Tables ==="
          php artisan db:show --counts || true
          
          # Seed database with test data (includes roles)
          echo "=== Seeding Database ==="
          php artisan db:seed --class=TestSeeder --verbose
          
      - name: Start Laravel Server
        run: |
          php artisan serve --host=127.0.0.1 --port=8000 &
          sleep 5
          
      - name: Run Behat Tests
        env:
          BEHAT_BASE_URL: http://127.0.0.1:8000
          QUEUE_CONNECTION: sync
        run: |
          # Run Behat tests using the CI script
          # This ensures only implemented features are tested and prevents interactive prompts
          ./bin/behat-ci
          
          # Also generate JUnit format output for test reporting
          vendor/bin/behat \
            --no-interaction \
            --format=progress \
            --format=junit \
            --out=std \
            --out=tests-results \
            features/account_management.feature
          
          vendor/bin/behat \
            --no-interaction \
            --format=progress \
            --format=junit \
            --out=std \
            --out=tests-results \
            features/basket_management.feature
          
      - name: Upload Behat Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: behat-results
          path: tests-results/